# kimsboard 프로젝트의 빠른 개발과 생산성 향상을 위해 CI/CD tool인 Github Actions를 사용
# Front-end와 Back-end 소스코드를 테스팅, 빌드, 패키징등의 작업을 관리하는 workflow 파일 

name: build_deploy

# 환경 변수 $변수명 으로 사용
# ex) $BUCKET_NAME
env: 
  FRONT_BUCKET_NAME : vue-build-output
  PROJECT_NAME : kimsboard
  BACK_BUCKET_NAME : webservice-deploy-storage

# master 브런치로 push할 때만 동작
on:
  push:
    branches: [ master ]

jobs:
  # backend build용 job
  backend_build:
    # runner의 환경
    runs-on: ubuntu-latest
    
    # 실행할 작업들
    steps:

    # 워크플로가 쓰인 프로젝트의 github 저장소의 $GITHUB_WORKSPACE에 접근할 수 있게 해줌
    # https://github.com/actions/checkout 
    - name: Checkout github workspace
      uses: actions/checkout@v2
      
    # Java파일 사용을 위한 Java 환경을 다운로드
    # https://github.com/actions/setup-java
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        java-package: jdk 
        architecture: x64

    # gradlew 실행권한 주기
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash

    # 속도 향상을 위해 캐시 사용 
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    
    # gradle build
    - name: Build with Gradle
      run: ./gradlew build
      shell: bash
      
    # zip으로 압축
    # 현재 directory를 현재 경로에 build.zip 이름으로 압축
    # -r 하위경로까지 모두다라는 옵션 
    - name: Compress the result into zip file
      run: zip -r ./build.zip .
      shell: bash
    
    # aws 인증서비스
    # github repository에서 Setting에서 사용할 암호화된 변수
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}
    
    # Upload to S3 stroage
    - name: Upload to S3
      run: aws s3 cp build.zip s3://$BACK_BUCKET_NAME/deploy/$PROJECT_NAME.zip --region ap-northeast-2        
    
    # AWS CodeDeploy 실행 
    - name: Code Deploy
      run: aws deploy create-deployment --application-name WebserviceCodeDeploy --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name kimsboard --s3-location bucket=$BACK_BUCKET_NAME,bundleType=zip,key=deploy/$PROJECT_NAME.zip

  # frontend build용 job
  front_build:
  
    # runner의 환경
    runs-on: ubuntu-latest
    
    # 실행할 작업들
    steps:
    # https://github.com/actions/checkout
    - uses: actions/checkout@v2
    
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install
      
    - name: Build Projection
      run: yarn build

    # aws 인증서비스
    # github repository에서 Setting에서 사용할 암호화된 변수
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

    # Upload to S3 stroage
    - name: Upload to S3
      run: aws s3 cp frontend/dist s3://$FRONT_BUCKET_NAME/ --region ap-northeast-2 --recursive
    